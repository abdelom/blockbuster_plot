#ifndef PAST_GRID_H // Si ce fichier n'a pas encore été inclus
#define PAST_GRID_H // alors définir PAST_GRID_H

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <string.h>
#include <unistd.h>
#include "sfs.h"
#include <omp.h>


// Definition of the `Time_gride` structure
typedef struct Time_gride
{
    double *time_scale;     // Logarithmically spaced time points between two bounds,
                            // generated by the `generate_logarithmic_scale` function.

    double **cumulative_bl; // Cumulative branch length matrix computed on the defined time scale.
                            // Each row corresponds to the number of descendants sustained in the present,
                            // and each column corresponds to a specific time interval.
    double *wik;
    int grid_size;          // Number of time points in the logarithmic time scale.
} Time_gride;

#define GRIDREFINE 1000

Time_gride init_time_grid(SFS sfs, int grid_size, double ub, double  lb);
Time_gride init_time_grid_H(int n_haplotypes, int grid_size, double *H);
Time_gride init_time_grid_H_wik(Time_gride tg, SFS sfs,  double *H);
void save_cumulated_weight(int sfs_length, int grid_size, double **matrix, char *filename);
void clear_time_grid(Time_gride tg, int sfs_length);
void cumulatve_weight_v2(int n_sample, int sfs_length, int grid_size, Time_gride *tg);
double* generate_linear_scale(int grid_size, double upper_bound, double lower_bound);
double* generate_logarithmic_scale(int grid_size, double upper_bound, double lower_bound);
#endif // Fin de la condition PAST_GRID